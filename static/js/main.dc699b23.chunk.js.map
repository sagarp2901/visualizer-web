{"version":3,"sources":["services/FetchData.js","components/bars/bars.js","components/dashboard/dashboard.js","components/map/map.js","components/timeSeries/timeSeries.js","App.js","serviceWorker.js","index.js"],"names":["getCases","type","fetch","CONFIRMED","DEATHS","RECOVERED","then","res","text","getDailyReport","useTodayDate","date","getTodayDate","getYesterdayDate","url","status","Date","setDate","getDate","dd","mm","getMonth","yyyy","getFullYear","formatChartData","data","country","filteredByCountry","filter","item","length","formatArraySeries","formatChartSingleSeries","formatDashboardData","shift","map","count","reduce","previousValue","currentValue","parseInt","removeProperties","arr","forEach","name","arrValues","keys","Object","seriesData","key","val","push","getTime","sum","row","isNaN","formatByCountry","dataArr","confirmed","dead","recovered","countries","formatDropdownCountries","dataByCountries","dataSumByCountries","countryArr","countrySum","formatSeries","formatted","deceased","sort","a","b","slice","series","color","uniqueCountries","indexOf","Bars","props","allowChartUpdate","state","createChart","bind","this","jsonResponse","readString","header","dataJson","formattedFinal","setState","console","warn","chartConfig","chart","height","title","xAxis","categories","legend","reversed","plotOptions","dataLabels","enabled","credits","exporting","className","containerProps","style","minWidth","width","highcharts","Highcharts","options","React","Component","Dashboard","value","class","responseConfirmed","dataConfirmed","responseRecovered","dataRecovered","responseDead","dataDead","formattedConfirmed","formattedRecovered","formattedDead","plotBackgroundColor","plotBorderWidth","plotShadow","align","verticalAlign","y","tooltip","pointFormat","pie","size","allowPointSelect","format","distance","startAngle","endAngle","center","innerSize","colorByPoint","Card","index","require","compose","withProps","withHandlers","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","MarkerClusterer","MapWithAMarkerClusterer","googleMapURL","loadingElement","containerElement","mapElement","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","log","defaultZoom","defaultCenter","lat","lng","onClick","averageCenter","enableRetinaIcons","gridSize","markers","marker","MapsComponent","region","coordinates","latitude","parseFloat","longitude","PureComponent","CustomMarker","showInfoWindow","e","setTimeout","handleMouseOver","handleMouseExit","position","onMouseOver","onMouseOut","HSIndicators","TimeSeries","label","confirmedSeries","deadSeries","recoveredSeries","countConfirmed","countRecovered","countDead","updateCountry","responseDeaths","dataDeaths","formattedDeaths","seriesConfirmed","seriesRecovered","seriesDead","yAxis","labels","rangeSelector","inputEnabled","buttonSpacing","buttonTheme","r","fill","stroke","fontSize","states","hover","select","buttons","onChange","placeholder","constructorType","TabPanel","children","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","backgroundColor","padding","App","classes","useTheme","useState","setValue","AppBar","Tabs","centered","event","newValue","indicatorColor","textColor","Tab","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"siBAAaA,EAAW,SAACC,GASxB,OAAOC,MARM,CACZC,UACC,mJACDC,OACC,gJACDC,UACC,oJAEgBJ,IAAOK,MAAK,SAACC,GAAD,OAASA,EAAIC,WAG/BC,EAAiB,SAACC,GAC9B,IAAMC,EAAOD,EAAeE,IAAiBC,IAEvCC,EAAG,0HAAsHH,EAAtH,QACT,OAAOT,MAAMY,GAAKR,MAAK,SAACC,GAEvB,OAAsB,MAAfA,EAAIQ,OAAiBR,EAAIC,OAASD,EAAIQ,WAkClCF,EAAmB,WAC/B,IAAIF,EAAO,IAAIK,KACfL,EAAKM,QAAQN,EAAKO,UAAY,GAC9B,IAAIC,EAAKR,EAAKO,UACdC,EAAKA,EAAK,EAAIA,EAAK,IAAMA,EACzB,IAAIC,EAAKT,EAAKU,WAAa,EAC3BD,EAAKA,EAAK,EAAIA,EAAK,IAAMA,EACzB,IAAIE,EAAOX,EAAKY,cAChB,MAAM,GAAN,OAAUH,EAAV,YAAgBD,EAAhB,YAAsBG,IAGVV,EAAe,WAC3B,IAAID,EAAO,IAAIK,KACfL,EAAKM,QAAQN,EAAKO,WAClB,IAAIC,EAAKR,EAAKO,UACdC,EAAKA,EAAK,EAAIA,EAAK,IAAMA,EACzB,IAAIC,EAAKT,EAAKU,WAAa,EAC3BD,EAAKA,EAAK,EAAIA,EAAK,IAAMA,EACzB,IAAIE,EAAOX,EAAKY,cAChB,MAAM,GAAN,OAAUH,EAAV,YAAgBD,EAAhB,YAAsBG,IAGVE,EAAkB,SAACC,EAAMC,GACrC,IAAMC,EAAoBF,EAAKG,QAAO,SAACC,GACtC,OAAOA,EAAK,oBAAsBH,KAInC,OADCD,EAAKK,OAAS,EAAIC,EAAkBJ,GAAqBK,EAAwBL,EAAkB,KAIxFM,EAAsB,SAACR,GAQnC,OAPAA,EAAKS,QACST,EAAKU,KAAI,SAACN,GACvB,MAAO,CAAEH,QAASG,EAAK,GAAIO,MAAOP,EAAKA,EAAKC,OAAS,OAElCO,QAAO,SAACC,EAAeC,GAC1C,MAAO,CAAEH,OAAQI,SAASF,EAAcF,QAAU,IAAMI,SAASD,EAAaH,QAAU,OACtFA,OAISK,EAAmB,SAACC,GAOhC,OANAA,EAAIC,SAAQ,SAACd,UACLA,EAAI,WACJA,EAAI,YACJA,EAAK,yBACLA,EAAK,qBAENa,GAGKV,EAA0B,SAACU,GACvC,IAAME,EAAOF,EAAI,kBAEXG,EAAYJ,EAAiB,CAAEC,IAAO,GACxCI,EAAOC,OAAOD,KAAKJ,GACnBM,EAAa,GAMjB,OALAF,EAAKH,SAAQ,SAACM,GACb,IAAMC,EAAML,EAAUI,GACtBD,EAAWG,KAAK,CAAE,IAAInC,KAAKiC,GAAKG,UAAWF,OAE5B,CAAEN,KAAMA,EAAMnB,KAAMuB,IAIxBjB,EAAoB,SAACW,GACjC,IAAME,EAAOF,EAAI,GAAG,kBACdG,EAAYJ,EAAiBC,GAC/BI,EAAOC,OAAOD,KAAKD,EAAU,IAC7BG,EAAa,GAUjB,OATAF,EAAKH,SAAQ,SAACM,GACb,IAAII,EAAM,EACVR,EAAUF,SAAQ,SAACW,GAClB,IAAIJ,EAAMV,SAASc,EAAIL,IACvBI,GAAQE,MAAML,GAA4B,EAArBV,SAASc,EAAIL,OAEnCD,EAAWG,KAAK,CAAE,IAAInC,KAAKiC,GAAKG,UAAWC,OAE5B,CAAET,KAAMA,EAAMnB,KAAMuB,IAexBQ,EAAkB,SAACC,GAC/B,IAAIhC,EAAOgC,EAAQtB,KAAI,SAACN,GACvB,MAAO,CACNH,QAASG,EAAK,kBACd6B,UAAWlB,SAASX,EAAI,YAAkB,EAC1C8B,KAAMnB,SAASX,EAAI,SAAe,EAClC+B,UAAWpB,SAASX,EAAI,YAAkB,MAIxCgC,EAAYC,EAAwBL,GAEpCM,EAAkB,GACtBF,EAAUlB,SAAQ,SAACjB,GAClB,IAAMC,EAAoBF,EAAKG,QAAO,SAACC,GACtC,OAAOA,EAAKH,UAAYA,KAEzBqC,EAAgBZ,KAAKxB,MAGtB,IAAIqC,EAAqB,GAczB,OAbAD,EAAgBpB,SAAQ,SAACsB,GACxB,GAAIA,GAAcA,EAAWnC,OAAQ,CACpC,IAAIoC,EAAaD,EAAW5B,QAAO,SAACC,EAAeC,GAClD,MAAO,CACNb,QAASY,EAAcZ,QACvBgC,UAAWlB,SAASF,EAAcoB,WAAalB,SAASD,EAAamB,WACrEC,KAAMrB,EAAcqB,KAAOpB,EAAaoB,KACxCC,UAAWtB,EAAcsB,UAAYrB,EAAaqB,cAGpDI,EAAmBb,KAAKe,OAGnBF,GAGKG,EAAe,SAACC,GAC5B,IAAIV,EAAY,GACZE,EAAY,GACZS,EAAW,GACfD,EAAUE,MAAK,SAACC,EAAGC,GAElB,OAAOA,EAAEd,UAAYa,EAAEb,aAGxB,IAAIG,EAAYO,EACdjC,KAAI,SAACN,GACL,OAAOA,EAAKH,WAEZ+C,MAAM,EAAG,IACXL,EAAUzB,SAAQ,SAACd,GAClB6B,EAAUP,KAAKtB,EAAK6B,WACpBE,EAAUT,KAAKtB,EAAK+B,WACpBS,EAASlB,KAAKtB,EAAK8B,SAEpB,IAAIe,EAAS,GAKb,OAHAA,EAAOvB,KAAK,CAAEP,KAAM,YAAanB,KAAMiC,EAAUe,MAAM,EAAG,IAAKE,MAAO,YACtED,EAAOvB,KAAK,CAAEP,KAAM,YAAanB,KAAMmC,EAAUa,MAAM,EAAG,IAAKE,MAAO,YACtED,EAAOvB,KAAK,CAAEP,KAAM,WAAYnB,KAAM4C,EAASI,MAAM,EAAG,IAAKE,MAAO,YAC7D,CAAED,OAAQA,EAAQb,UAAWA,IAmLxBC,EAA0B,SAACrC,GACvC,IAAIoC,EAAY,GAChBpC,EAAKkB,SAAQ,SAACd,GACbgC,EAAUV,KAAKtB,EAAK,sBAErB,IAAI+C,EAAkB,GAKtB,OAJAf,EAAUlB,SAAQ,SAACd,GACdA,GAAQ+C,EAAgBC,QAAQhD,GAAQ,GAAG+C,EAAgBzB,KAAKtB,MAErE+C,EAAgBN,OACTM,G,QCxWaE,G,yDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,kBAAmB,EACxB,EAAKC,MAAQ,CACZP,OAAQ,GACRb,UAAW,IAEZ,EAAKqB,YAAc,EAAKA,YAAYC,KAAjB,gBAPD,E,0LAWZC,KAAKF,c,gRAKVE,KAAKJ,kBAAmB,E,SACGvE,GAAe,G,cAApC4E,E,gBACiBC,YAAWD,EAAc,CAAEE,QAAQ,I,QAApDC,E,UAECpB,EAAYZ,EAAgBgC,EAAS/D,MACrCgE,EAAiBtB,EAAaC,GACpCgB,KAAKM,SAAS,CAAEhB,OAAQe,EAAef,OAAQb,UAAW4B,EAAe5B,a,kDAG1E8B,QAAQC,KAAR,M,+IAIQ,IA3DQnE,EA2DT,EACsB2D,KAAKH,MAA3BP,EADA,EACAA,OAAQb,EADR,EACQA,UACVgC,EA7DqB,CAC5BC,MAAO,CACN7F,KAAM,MACN8F,OAAQ,QAETC,MAAO,CACNxF,KAAM,6BAEPyF,MAAO,CACNC,YATiBzE,EA6Da,CAAEiD,SAAQb,cApDvBA,WAElBsC,OAAQ,CACPC,UAAU,GAEXC,YAAa,CACZ3B,OAAQ,CACP4B,WAAY,CACXC,SAAS,KAIZ7B,OAAQjD,EAAKiD,OACb8B,QAAS,CACRD,SAAS,GAEVE,UAAW,CACVF,SAAS,IAoCT,OACC,yBAAKG,UAAU,QACd,kBAAC,IAAD,CACCC,eAAgB,CAAEC,MAAO,CAAEC,SAAU,QAASC,MAAO,SACrDC,WAAYC,IACZC,QAASpB,S,GAtCoBqB,IAAMC,Y,kBCkCnBC,E,kDACpB,aAAe,IAAD,8BACb,gBACKnC,MAAQ,CACZ7C,MAAO,CACN,CAAEQ,KAAM,kBAAmByE,MAAO,EAAGC,MAAO,UAC5C,CAAE1E,KAAM,kBAAmByE,MAAO,EAAGC,MAAO,SAC5C,CAAE1E,KAAM,iBAAkByE,MAAO,EAAGC,MAAO,SANhC,E,2NAaoBtH,EAAS,a,cAAnCuH,E,gBACsBjC,YAAWiC,G,cAAjCC,E,gBAC0BxH,EAAS,a,cAAnCyH,E,iBACsBnC,YAAWmC,G,eAAjCC,E,iBACqB1H,EAAS,U,eAA9B2H,E,iBACiBrC,YAAWqC,G,QAA5BC,E,OACFJ,GAAiBE,GAAiBE,IAC/BC,EAAqB5F,EAAoBuF,EAAc/F,MACvDqG,EAAqB7F,EAAoByF,EAAcjG,MACvDsG,EAAgB9F,EAAoB2F,EAASnG,OAE/CW,EAAQgD,KAAKH,MAAM7C,OACjB,GAAGiF,MAAQQ,EACjBzF,EAAM,GAAGiF,MAAQS,EACjB1F,EAAM,GAAGiF,MAAQU,EACjB3C,KAAKM,SAAS,CAAEtD,W,kDAGjBuD,QAAQC,KAAR,M,+IAIQ,IAlGQnE,EAmGTW,EAAUgD,KAAKH,MAAf7C,MACFyD,EApGqB,CAC5BC,MAAO,CACNkC,oBAAqB,KACrBC,gBAAiB,KACjBC,YAAY,GAEblC,MAAO,CACNxF,KAAM,qBACN2H,MAAO,SACPC,cAAe,SACfC,EAAG,KAEJC,QAAS,CACRC,YAAa,iDAEdlC,YAAa,CACZmC,IAAK,CACJC,KAAM,IACNC,kBAAkB,EAClBpC,WAAY,CACXC,SAAS,EACToC,OAAQ,gDACRC,UAAW,IAEZC,YAAa,GACbC,SAAU,GACVC,OAAQ,CAAE,MAAO,SAGnBrE,OAAQ,CACP,CACCzE,KAAM,MACN2C,KAAM,QACNoG,UAAW,MACXC,cAAc,EACdxH,KAAM,CACL,CACCmB,KAAM,YACN+B,MAAO,UACP0D,GAvCc5G,EAoGa,CAAEW,UA7DrBA,MAAM,GAAGiF,OAAS,GAE3B,CACCzE,KAAM,YACN+B,MAAO,UACP0D,EAAG5G,EAAKW,MAAM,GAAGiF,OAAS,GAE3B,CACCzE,KAAM,WACN+B,MAAO,UACP0D,EAAG5G,EAAKW,MAAM,GAAGiF,OAAS,MAK9Bb,QAAS,CACRD,SAAS,GAEVE,UAAW,CACVF,SAAS,IA4CT,OACC,yBAAKG,UAAU,uBACd,yBAAKA,UAAU,SACd,kBAACwC,EAAA,EAAD,CAAMxC,UAAU,QACf,kBAAC,IAAD,CACCC,eAAgB,CAAEC,MAAO,CAAEC,SAAU,QAASC,MAAO,SACrDC,WAAYC,IACZC,QAASpB,KAIVT,KAAKH,MAAM7C,MAAMD,KAAI,SAACN,EAAMsH,GAAP,OACrB,kBAACD,EAAA,EAAD,CAAMjG,IAAKkG,EAAOzC,UAAU,QAC3B,6BAAM7E,EAAKe,MACX,yBAAK8D,UAAW7E,EAAKyF,OAAQzF,EAAKwF,OAAS,iC,GAtDXH,IAAMC,W,UCjEAiC,EAAQ,KAA7CC,E,EAAAA,QAASC,E,EAAAA,UAAWC,E,EAAAA,a,EAC2CH,EAAQ,KAAvEI,E,EAAAA,aAAcC,E,EAAAA,cAAeC,E,EAAAA,UAAWC,E,EAAAA,OAAQC,E,EAAAA,WAChDC,GAAoBT,EAAQ,KAA5BS,gBAEFC,GAA0BT,EAC/BC,EAAU,CACTS,aACC,gIACDC,eAAgB,yBAAKpD,MAAO,CAAEb,OAAO,UACrCkE,iBAAkB,yBAAKrD,MAAO,CAAEb,OAAQ,WACxCmE,WAAY,yBAAKtD,MAAO,CAAEb,OAAO,YAElCwD,EAAa,CACZY,uBAAwB,kBAAM,SAACC,GAC9B,IAAMC,EAAiBD,EAAgBE,aACvC3E,QAAQ4E,IAAR,0CAA+CF,EAAevI,SAC9D6D,QAAQ4E,IAAIF,OAGdb,EACAC,EAhB+BJ,EAiB9B,SAACtE,GAAD,OACD,kBAAC2E,EAAD,CAAWc,YAAa,EAAGC,cAAe,CAAEC,IAAK,WAAYC,IAAK,UACjE,kBAACd,GAAD,CAAiBe,QAAS7F,EAAMoF,uBAAwBU,eAAa,EAACC,mBAAiB,EAACC,SAAU,IAChGhG,EAAMiG,QAAQ7I,KAAI,SAAC8I,EAAQ9B,GAAT,OAAmB,kBAAC,GAAD,CAAclG,IAAKkG,EAAO8B,OAAQA,YAKtDC,G,kDACpB,WAAYnG,GAAQ,IAAD,8BAClB,cAAMA,IACDE,MAAQ,CACZ+F,QAAS,IAHQ,E,2MA+BUvK,GAAe,G,cAApC4E,E,gBACiBC,YAAWD,EAAc,CAAEE,QAAQ,I,QAApDC,E,SACUA,EAAS/D,OACxB2D,KAAKM,SAAS,CAAEsF,SHlCevJ,EGkCa+D,EAAS/D,KHjCzCA,EAAKU,KAAI,SAACN,GACxB,MAAO,CACNH,QAASG,EAAK,kBACdsJ,OAAQtJ,EAAK,kBACbuJ,YAAa,CACZC,SAAUC,WAAWzJ,EAAI,WAAiB,EAC1C0J,UAAWD,WAAWzJ,EAAI,YAAkB,GAE7C6B,UAAW7B,EAAI,UACf8B,KAAM9B,EAAI,OACV+B,UAAW/B,EAAI,iBGwBd8D,QAAQ4E,IAAInF,KAAKH,MAAM+F,U,kDAGxBrF,QAAQC,KAAR,M,kCHtC+B,IAACnE,I,0GG2CjC,OACC,yBAAKmF,MAAO,CAAEE,MAAO,OAAQf,OAAQ,UACpC,kBAAC+D,GAAD,CAAyBkB,QAAS5F,KAAKH,MAAM+F,e,GA9CN9D,IAAMsE,eAoD3CC,G,4MACLxG,MAAQ,CACPyG,gBAAgB,G,EAEjBd,QAAU,SAACe,GACV,EAAKjG,SAAS,CACbgG,gBAAiB,EAAKzG,MAAMyG,iBAE7BE,YAAW,WACV,EAAKlG,SAAS,CACbgG,gBAAiB,EAAKzG,MAAMyG,mBAE3B,M,EAEJG,gBAAkB,SAACF,GAClB,EAAKjG,SAAS,CACbgG,gBAAgB,K,EAGlBI,gBAAkB,SAACH,GAClB,EAAKjG,SAAS,CACbgG,gBAAgB,K,uDAGR,IACDA,EAAmBtG,KAAKH,MAAxByG,eACAT,EAAW7F,KAAKL,MAAhBkG,OACR,OACC,kBAACtB,EAAD,CACCoC,SAAU,CAAErB,IAAKO,EAAOG,YAAYC,SAAUV,IAAKM,EAAOG,YAAYG,WACtEX,QAASxF,KAAKwF,QACdoB,YAAa5G,KAAKyG,gBAClBI,WAAY7G,KAAK0G,iBAChBJ,GACA,kBAAC9B,EAAD,KACC,yBAAKlD,UAAU,mBACd,yBAAKA,UAAU,UAAf,cAAoCuE,EAAOvH,WAC3C,yBAAKgD,UAAU,SAAf,cAAmCuE,EAAOrH,WAC1C,yBAAK8C,UAAU,OAAf,aAAgCuE,EAAOtH,a,GAtCnBwD,a,6EC3E3B+E,KAAalF,MAEb,IA8EqBmF,G,kDACpB,WAAYpH,GAAQ,IAAD,8BAClB,cAAMA,IACDC,kBAAmB,EACxB,EAAKC,MAAQ,CACZvD,QAAS,CAAE2F,MAAO,QAAS+E,MAAO,SAClCvI,UAAW,GACXwI,gBAAiB,GACjBC,WAAY,GACZC,gBAAiB,GACjBC,eAAgB,EAChBC,eAAgB,EAChBC,UAAW,EACXzG,MAAO,IAGR,EAAKf,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKwH,cAAgB,EAAKA,cAAcxH,KAAnB,gBAhBH,E,0LAsBZC,KAAKF,c,oSAKVE,KAAKJ,kBAAmB,E,SAEQhF,EAAS,a,cAAnCuH,E,gBACsBjC,YAAWiC,EAAmB,CAAEhC,QAAQ,I,cAA9DiC,E,iBAEuBxH,EAAS,U,eAAhC4M,E,iBACmBtH,YAAWsH,EAAgB,CAAErH,QAAQ,I,eAAxDsH,E,iBAE0B7M,EAAS,a,eAAnCyH,E,iBACsBnC,YAAWmC,EAAmB,CAAElC,QAAQ,I,QAA9DmC,E,OAGFF,IACC5C,EAAkBd,EAAwB0D,EAAc/F,MAEtDoC,EAAYe,EAAgBzC,KAAI,SAACN,GACtC,MAAO,CAAEuK,MAAOvK,EAAMwF,MAAOxF,MAE9BuD,KAAKM,SAAS,CAAE7B,eAGb2D,GAAiBqF,GAAcnF,IAC5BG,EAAqBrG,EAAgBgG,EAAc/F,KAAM2D,KAAKH,MAAMvD,QAAQ2F,OAC5EyF,EAAkBtL,EAAgBqL,EAAWpL,KAAM2D,KAAKH,MAAMvD,QAAQ2F,OACtES,EAAqBtG,EAAgBkG,EAAcjG,KAAM2D,KAAKH,MAAMvD,QAAQ2F,QAC9E0F,EAAkBlF,GACNjF,KAAO,YACvBmK,EAAgBpI,MAAQ,WACpBqI,EAAkBlF,GACNlF,KAAO,YACvBoK,EAAgBrI,MAAQ,WACpBsI,EAAaH,GACNlK,KAAO,WAClBqK,EAAWtI,MAAQ,UACnBS,KAAKM,SAAS,CACb2G,gBAAiBU,EACjBT,WAAYW,EACZV,gBAAiBS,EACjBR,eAAgBO,EAAgBtL,KAAKsL,EAAgBtL,KAAKK,OAAS,GAAG,IAAM,EAC5E4K,UAAWO,EAAWxL,KAAKwL,EAAWxL,KAAKK,OAAS,GAAG,IAAM,EAC7D2K,eAAgBO,EAAgBvL,KAAKuL,EAAgBvL,KAAKK,OAAS,GAAG,IAAM,EAC5EmE,MAAO8G,EAAgBtL,KAAKU,KAAI,SAACN,GAChC,OAAOA,EAAK,S,kDAKf8D,QAAQC,KAAR,M,6LAIkBlE,G,wEACnB0D,KAAKM,SAAS,CAAEhE,Y,SACV0D,KAAKF,c,sIAGF,IAlKQzD,EAkKT,EAC4E2D,KAAKH,MAAjFoH,EADA,EACAA,gBAAiBE,EADjB,EACiBA,gBAAiBD,EADlC,EACkCA,WAAYrG,EAD9C,EAC8CA,MAAOvE,EADrD,EACqDA,QAASmC,EAD9D,EAC8DA,UAChEgC,EApKqB,CAC5BG,MAAO,CACNxF,KAAM,2CAEPsF,MAAO,CACN7F,KAAM,UAEPiN,MAAO,CACNlH,MAAO,CAAExF,KAAM,gBAEhByF,MAAO,CACNC,YAXiBzE,EAoKa,CAAE4K,kBAAiBE,kBAAiBD,aAAYrG,UAzJ7DA,MACjBhG,KAAM,WACNkN,OAAQ,CACPxE,OAAQ,kBAIVyE,cAAe,CACdC,cAAc,EACdC,cAAe,GACfC,YAAa,CAEZC,EAAG,EACHC,KAAM,OACNC,OAAQ,OACR5G,MAAO,GACPf,OAAQ,GACRa,MAAO,CACNjC,MAAO,OACPgJ,SAAU,QAEXC,OAAQ,CACPC,MAAO,CACNJ,KAAM,UACNC,OAAQ,WAETI,OAAQ,CACPL,KAAM,OACN7G,MAAO,CACNjC,MAAO,YAKXoJ,QAAS,CACR,CACC9N,KAAM,MACNmC,MAAO,GACP5B,KAAM,WAEP,CACCP,KAAM,MACNmC,MAAO,GACP5B,KAAM,WAEP,CACCP,KAAM,MACNmC,MAAO,GACP5B,KAAM,WAEP,CACCP,KAAM,MACNmC,MAAOX,EAAK4K,gBAAgBvK,OAAS,EACrCtB,KAAM,SAKTkE,OAAQ,CAAEjD,EAAK4K,gBAAiB5K,EAAK6K,WAAY7K,EAAK8K,iBACtD/F,QAAS,CACRD,SAAS,GAEVE,UAAW,CACVF,SAAS,IA2FT,OACC,yBAAKG,UAAU,SACd,yBAAKA,UAAU,QACd,kBAAC,KAAD,CACCO,QAASpD,EACTmK,SAAU5I,KAAKuH,cACftF,MAAO3F,EACPuM,YAAY,sBAGd,kBAAC/E,EAAA,EAAD,CAAMxC,UAAU,SACf,kBAAC,IAAD,CACCwH,gBAAiB,aACjBvH,eAAgB,CAAEC,MAAO,CAAEC,SAAU,QAASC,MAAO,OAAQf,OAAQ,SACrEgB,WAAYC,KACZC,QAASpB,U,GAtGyBqB,IAAMC,WC7E9C,SAASgH,GAASpJ,GAAQ,IACjBqJ,EAAqCrJ,EAArCqJ,SAAU/G,EAA2BtC,EAA3BsC,MAAO8B,EAAoBpE,EAApBoE,MAAUkF,EADX,YACqBtJ,EADrB,8BAGxB,OACC,kBAACuJ,EAAA,EAAD,eACCC,UAAU,MACVC,KAAK,WACLC,OAAQpH,IAAU8B,EAClBuF,GAAE,8BAAyBvF,GAC3BwF,kBAAA,yBAAmCxF,IAC/BkF,GACHhH,IAAU8B,GAAS,kBAACyF,EAAA,EAAD,CAAKC,EAAG,GAAIT,IAWnC,SAASU,GAAU3F,GAClB,MAAO,CACNuF,GAAG,kBAAD,OAAoBvF,GACtB,gBAAgB,uBAAhB,OAAwCA,IAI1C,IAAM4F,GAAYC,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACLC,gBAAiB,UACjBC,QAAS,SAII,SAASC,KACvB,IAAMC,EAAUP,KADa,GAEfQ,cACcrI,IAAMsI,SAAS,IAHd,mBAGrBnI,EAHqB,KAGdoI,EAHc,KAS7B,OACC,yBAAK/I,UAAW4I,EAAQJ,MACvB,kBAACQ,EAAA,EAAD,CAAQ3D,SAAS,SAASpH,MAAM,WAC/B,kBAACgL,EAAA,EAAD,CAAMC,UAAQ,EAACvI,MAAOA,EAAO2G,SAPX,SAAC6B,EAAOC,GAC5BL,EAASK,IAM8CC,eAAe,UAAUC,UAAU,WACvF,kBAACC,EAAA,EAAD,eAAK7D,MAAM,aAAgB0C,GAAU,KACrC,kBAACmB,EAAA,EAAD,eAAK7D,MAAM,YAAe0C,GAAU,KACpC,kBAACmB,EAAA,EAAD,eAAK7D,MAAM,UAAa0C,GAAU,KAClC,kBAACmB,EAAA,EAAD,eAAK7D,MAAM,eAAkB0C,GAAU,OAGzC,kBAACX,GAAD,CAAU9G,MAAOA,EAAO8B,MAAO,GAC9B,kBAAC,EAAD,OAED,kBAACgF,GAAD,CAAU9G,MAAOA,EAAO8B,MAAO,GAC9B,kBAAC,GAAD,OAED,kBAACgF,GAAD,CAAU9G,MAAOA,EAAO8B,MAAO,GAC9B,kBAAC,EAAD,OAED,kBAACgF,GAAD,CAAU9G,MAAOA,EAAO8B,MAAO,GAC9B,kBAAC,GAAD,QCnEgB+G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACnB,GAAD,MAASoB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvQ,MAAK,SAAAwQ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtL,QAAQsL,MAAMA,EAAMC,c","file":"static/js/main.dc699b23.chunk.js","sourcesContent":["export const getCases = (type) => {\n\tconst URLS = {\n\t\tCONFIRMED:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',\n\t\tDEATHS:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv',\n\t\tRECOVERED:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv'\n\t};\n\treturn fetch(URLS[type]).then((res) => res.text());\n};\n\nexport const getDailyReport = (useTodayDate) => {\n\tconst date = useTodayDate ? getTodayDate() : getYesterdayDate();\n\n\tconst url = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`;\n\treturn fetch(url).then((res) => {\n\t\t// If today's data exist then 200 will be returned\n\t\treturn res.status === 200 ? res.text() : res.status;\n\t});\n};\n\nexport const formatMarkers = (data) => {\n\tconst result = data.map((item) => {\n\t\treturn {\n\t\t\ttitle: `${item['Province/State']} - ${item['Country/Region']}`,\n\t\t\tcoordinates: {\n\t\t\t\tlatitude: parseFloat(item['Lat']),\n\t\t\t\tlongitude: parseFloat(item['Long'])\n\t\t\t}\n\t\t};\n\t});\n\treturn result;\n};\n\nexport const formatDailyMarkers = (data) => {\n\tconst result = data.map((item) => {\n\t\treturn {\n\t\t\tcountry: item['Country/Region'],\n\t\t\tregion: item['Province/State'],\n\t\t\tcoordinates: {\n\t\t\t\tlatitude: parseFloat(item['Latitude']) || 0,\n\t\t\t\tlongitude: parseFloat(item['Longitude']) || 0\n\t\t\t},\n\t\t\tconfirmed: item['Confirmed'],\n\t\t\tdead: item['Deaths'],\n\t\t\trecovered: item['Recovered']\n\t\t};\n\t});\n\treturn result;\n};\n\nexport const getYesterdayDate = () => {\n\tlet date = new Date();\n\tdate.setDate(date.getDate() - 1);\n\tlet dd = date.getDate();\n\tdd = dd > 9 ? dd : '0' + dd;\n\tlet mm = date.getMonth() + 1;\n\tmm = mm > 9 ? mm : '0' + mm;\n\tlet yyyy = date.getFullYear();\n\treturn `${mm}-${dd}-${yyyy}`;\n};\n\nexport const getTodayDate = () => {\n\tlet date = new Date();\n\tdate.setDate(date.getDate());\n\tlet dd = date.getDate();\n\tdd = dd > 9 ? dd : '0' + dd;\n\tlet mm = date.getMonth() + 1;\n\tmm = mm > 9 ? mm : '0' + mm;\n\tlet yyyy = date.getFullYear();\n\treturn `${mm}-${dd}-${yyyy}`;\n};\n\nexport const formatChartData = (data, country) => {\n\tconst filteredByCountry = data.filter((item) => {\n\t\treturn item['Country/Region'] === country;\n\t});\n\tconst formatted =\n\t\tdata.length > 1 ? formatArraySeries(filteredByCountry) : formatChartSingleSeries(filteredByCountry[0]);\n\treturn formatted;\n};\n\nexport const formatDashboardData = (data) => {\n\tdata.shift();\n\tlet cleaned = data.map((item) => {\n\t\treturn { country: item[1], count: item[item.length - 1] };\n\t});\n\tlet count = cleaned.reduce((previousValue, currentValue) => {\n\t\treturn { count: (parseInt(previousValue.count) || 0) + (parseInt(currentValue.count) || 0) };\n\t}).count;\n\treturn count;\n};\n\nexport const removeProperties = (arr) => {\n\tarr.forEach((item) => {\n\t\tdelete item['Lat'];\n\t\tdelete item['Long'];\n\t\tdelete item['Province/State'];\n\t\tdelete item['Country/Region'];\n\t});\n\treturn arr;\n};\n\nexport const formatChartSingleSeries = (arr) => {\n\tconst name = arr['Country/Region'];\n\t// Remove unwanted properties\n\tconst arrValues = removeProperties([ arr ])[0];\n\tlet keys = Object.keys(arr);\n\tlet seriesData = [];\n\tkeys.forEach((key) => {\n\t\tconst val = arrValues[key];\n\t\tseriesData.push([ new Date(key).getTime(), val ]);\n\t});\n\tlet seriesObj = { name: name, data: seriesData };\n\treturn seriesObj;\n};\n\nexport const formatArraySeries = (arr) => {\n\tconst name = arr[0]['Country/Region'];\n\tconst arrValues = removeProperties(arr);\n\tlet keys = Object.keys(arrValues[0]);\n\tlet seriesData = [];\n\tkeys.forEach((key) => {\n\t\tlet sum = 0;\n\t\tarrValues.forEach((row) => {\n\t\t\tlet val = parseInt(row[key]);\n\t\t\tsum += !isNaN(val) ? parseInt(row[key]) : 0;\n\t\t});\n\t\tseriesData.push([ new Date(key).getTime(), sum ]);\n\t});\n\tlet seriesObj = { name: name, data: seriesData };\n\treturn seriesObj;\n};\n\nexport const getCountries = () => {\n\tlet countries = getCountryArr();\n\n\treturn countries.sort().map((val) => {\n\t\treturn {\n\t\t\tlabel: val,\n\t\t\tvalue: val\n\t\t};\n\t});\n};\n\nexport const formatByCountry = (dataArr) => {\n\tlet data = dataArr.map((item) => {\n\t\treturn {\n\t\t\tcountry: item['Country/Region'],\n\t\t\tconfirmed: parseInt(item['Confirmed']) || 0,\n\t\t\tdead: parseInt(item['Deaths']) || 0,\n\t\t\trecovered: parseInt(item['Recovered']) || 0\n\t\t};\n\t});\n\t// Dynamically getting countries from data\n\tlet countries = formatDropdownCountries(dataArr);\n\n\tlet dataByCountries = [];\n\tcountries.forEach((country) => {\n\t\tconst filteredByCountry = data.filter((item) => {\n\t\t\treturn item.country === country;\n\t\t});\n\t\tdataByCountries.push(filteredByCountry);\n\t});\n\n\tlet dataSumByCountries = [];\n\tdataByCountries.forEach((countryArr) => {\n\t\tif (countryArr && countryArr.length) {\n\t\t\tlet countrySum = countryArr.reduce((previousValue, currentValue) => {\n\t\t\t\treturn {\n\t\t\t\t\tcountry: previousValue.country,\n\t\t\t\t\tconfirmed: parseInt(previousValue.confirmed) + parseInt(currentValue.confirmed),\n\t\t\t\t\tdead: previousValue.dead + currentValue.dead,\n\t\t\t\t\trecovered: previousValue.recovered + currentValue.recovered\n\t\t\t\t};\n\t\t\t});\n\t\t\tdataSumByCountries.push(countrySum);\n\t\t}\n\t});\n\treturn dataSumByCountries;\n};\n\nexport const formatSeries = (formatted) => {\n\tlet confirmed = [];\n\tlet recovered = [];\n\tlet deceased = [];\n\tformatted.sort((a, b) => {\n\t\t//Sort descending\n\t\treturn b.confirmed - a.confirmed;\n\t});\n\t// Get top 10 countries for chart config\n\tlet countries = formatted\n\t\t.map((item) => {\n\t\t\treturn item.country;\n\t\t})\n\t\t.slice(0, 10);\n\tformatted.forEach((item) => {\n\t\tconfirmed.push(item.confirmed);\n\t\trecovered.push(item.recovered);\n\t\tdeceased.push(item.dead);\n\t});\n\tlet series = [];\n\t// Get top 10 countries data for chart\n\tseries.push({ name: 'Confirmed', data: confirmed.slice(0, 10), color: '#F9D93E' });\n\tseries.push({ name: 'Recovered', data: recovered.slice(0, 10), color: '#4caf50' });\n\tseries.push({ name: 'Deceased', data: deceased.slice(0, 10), color: '#e53935' });\n\treturn { series: series, countries: countries };\n};\n\nexport const getCountryArr = () => {\n\treturn [\n\t\t'Thailand',\n\t\t'Japan',\n\t\t'Singapore',\n\t\t'Nepal',\n\t\t'Malaysia',\n\t\t'Canada',\n\t\t'Australia',\n\t\t'Cambodia',\n\t\t'Sri Lanka',\n\t\t'Germany',\n\t\t'Finland',\n\t\t'United Arab Emirates',\n\t\t'Philippines',\n\t\t'India',\n\t\t'Italy',\n\t\t'Sweden',\n\t\t'Spain',\n\t\t'Belgium',\n\t\t'Egypt',\n\t\t'Lebanon',\n\t\t'Iraq',\n\t\t'Oman',\n\t\t'Afghanistan',\n\t\t'Bahrain',\n\t\t'Kuwait',\n\t\t'Algeria',\n\t\t'Croatia',\n\t\t'Switzerland',\n\t\t'Austria',\n\t\t'Israel',\n\t\t'Pakistan',\n\t\t'Brazil',\n\t\t'Georgia',\n\t\t'Greece',\n\t\t'North Macedonia',\n\t\t'Norway',\n\t\t'Romania',\n\t\t'Estonia',\n\t\t'San Marino',\n\t\t'Belarus',\n\t\t'Iceland',\n\t\t'Lithuania',\n\t\t'Mexico',\n\t\t'New Zealand',\n\t\t'Nigeria',\n\t\t'Ireland',\n\t\t'Luxembourg',\n\t\t'Monaco',\n\t\t'Qatar',\n\t\t'Ecuador',\n\t\t'Azerbaijan',\n\t\t'Armenia',\n\t\t'Dominican Republic',\n\t\t'Indonesia',\n\t\t'Portugal',\n\t\t'Andorra',\n\t\t'Latvia',\n\t\t'Morocco',\n\t\t'Saudi Arabia',\n\t\t'Senegal',\n\t\t'Argentina',\n\t\t'Chile',\n\t\t'Jordan',\n\t\t'Ukraine',\n\t\t'Hungary',\n\t\t'Liechtenstein',\n\t\t'Poland',\n\t\t'Tunisia',\n\t\t'Bosnia and Herzegovina',\n\t\t'Slovenia',\n\t\t'South Africa',\n\t\t'Bhutan',\n\t\t'Cameroon',\n\t\t'Colombia',\n\t\t'Costa Rica',\n\t\t'Peru',\n\t\t'Serbia',\n\t\t'Slovakia',\n\t\t'Togo',\n\t\t'Malta',\n\t\t'Martinique',\n\t\t'Bulgaria',\n\t\t'Maldives',\n\t\t'Bangladesh',\n\t\t'Paraguay',\n\t\t'Albania',\n\t\t'Cyprus',\n\t\t'Brunei',\n\t\t'US',\n\t\t'Burkina Faso',\n\t\t'Holy See',\n\t\t'Mongolia',\n\t\t'Panama',\n\t\t'China',\n\t\t'Iran',\n\t\t'Korea, South',\n\t\t'France',\n\t\t'Cruise Ship',\n\t\t'Denmark',\n\t\t'Czechia',\n\t\t'Taiwan*',\n\t\t'Vietnam',\n\t\t'Russia',\n\t\t'Moldova',\n\t\t'Bolivia',\n\t\t'Honduras',\n\t\t'United Kingdom',\n\t\t'Congo (Kinshasa)',\n\t\t\"Cote d'Ivoire\",\n\t\t'Jamaica',\n\t\t'Turkey',\n\t\t'Cuba',\n\t\t'Guyana',\n\t\t'Kazakhstan',\n\t\t'Ethiopia',\n\t\t'Sudan',\n\t\t'Guinea',\n\t\t'Kenya',\n\t\t'Antigua and Barbuda',\n\t\t'Uruguay',\n\t\t'Ghana',\n\t\t'Namibia',\n\t\t'Seychelles',\n\t\t'Trinidad and Tobago',\n\t\t'Venezuela',\n\t\t'Eswatini',\n\t\t'Gabon',\n\t\t'Guatemala',\n\t\t'Mauritania',\n\t\t'Rwanda',\n\t\t'Saint Lucia',\n\t\t'Saint Vincent and the Grenadines',\n\t\t'Suriname',\n\t\t'Kosovo',\n\t\t'Central African Republic',\n\t\t'Congo (Brazzaville)',\n\t\t'Equatorial Guinea',\n\t\t'Uzbekistan',\n\t\t'Netherlands',\n\t\t'Benin',\n\t\t'Liberia',\n\t\t'Somalia',\n\t\t'Tanzania',\n\t\t'Barbados',\n\t\t'Montenegro',\n\t\t'Kyrgyzstan',\n\t\t'Mauritius',\n\t\t'Zambia',\n\t\t'Djibouti',\n\t\t'Gambia, The',\n\t\t'Bahamas, The',\n\t\t'Chad',\n\t\t'El Salvador',\n\t\t'Fiji',\n\t\t'Nicaragua'\n\t];\n};\n\nexport const getTotals = (markers) => {\n\tlet totals = {\n\t\ttotalConfirmed: 0,\n\t\ttotalDead: 0,\n\t\ttotalRecovered: 0\n\t};\n\tif (markers && markers.length) {\n\t\tmarkers.forEach((marker) => {\n\t\t\ttotals.totalConfirmed += parseInt(marker.confirmed) ? parseInt(marker.confirmed) : 0;\n\t\t\ttotals.totalDead += parseInt(marker.dead) ? parseInt(marker.dead) : 0;\n\t\t\ttotals.totalRecovered += parseInt(marker.recovered) ? parseInt(marker.recovered) : 0;\n\t\t});\n\t}\n\treturn totals;\n};\n\nexport const formatDropdownCountries = (data) => {\n\tlet countries = [];\n\tdata.forEach((item) => {\n\t\tcountries.push(item['Country/Region']);\n\t});\n\tlet uniqueCountries = [];\n\tcountries.forEach((item) => {\n\t\tif (item && uniqueCountries.indexOf(item) < 0) uniqueCountries.push(item);\n\t});\n\tuniqueCountries.sort();\n\treturn uniqueCountries;\n};\n","import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { getDailyReport, formatByCountry, formatSeries } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport './bars.scss';\n\nconst getConfig = (data) => ({\n\tchart: {\n\t\ttype: 'bar',\n\t\theight: '100%'\n\t},\n\ttitle: {\n\t\ttext: 'Top 10 Affected Countries'\n\t},\n\txAxis: {\n\t\tcategories: data.countries\n\t},\n\tlegend: {\n\t\treversed: false\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tdataLabels: {\n\t\t\t\tenabled: true\n\t\t\t}\n\t\t}\n\t},\n\tseries: data.series,\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\nexport default class Bars extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.allowChartUpdate = true;\n\t\tthis.state = {\n\t\t\tseries: [],\n\t\t\tcountries: []\n\t\t};\n\t\tthis.createChart = this.createChart.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.createChart();\n\t}\n\n\tasync createChart() {\n\t\ttry {\n\t\t\tthis.allowChartUpdate = false;\n\t\t\tconst jsonResponse = await getDailyReport(false);\n\t\t\tconst dataJson = await readString(jsonResponse, { header: true });\n\t\t\tif (dataJson) {\n\t\t\t\tconst formatted = formatByCountry(dataJson.data);\n\t\t\t\tconst formattedFinal = formatSeries(formatted);\n\t\t\t\tthis.setState({ series: formattedFinal.series, countries: formattedFinal.countries });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { series, countries } = this.state;\n\t\tconst chartConfig = getConfig({ series, countries });\n\t\treturn (\n\t\t\t<div className='card'>\n\t\t\t\t<HighchartsReact\n\t\t\t\t\tcontainerProps={{ style: { minWidth: '375px', width: '100%' } }}\n\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\toptions={chartConfig}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './dashboard.scss';\nimport Card from '@material-ui/core/Card';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { formatDashboardData, getCases } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\n\nconst getConfig = (data) => ({\n\tchart: {\n\t\tplotBackgroundColor: null,\n\t\tplotBorderWidth: null,\n\t\tplotShadow: false\n\t},\n\ttitle: {\n\t\ttext: '<b>Total Cases</b>',\n\t\talign: 'center',\n\t\tverticalAlign: 'middle',\n\t\ty: 100\n\t},\n\ttooltip: {\n\t\tpointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n\t},\n\tplotOptions: {\n\t\tpie: {\n\t\t\tsize: 350,\n\t\t\tallowPointSelect: true,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: true,\n\t\t\t\tformat: '<b>{point.name}</b>: {point.percentage:.1f} %',\n\t\t\t\tdistance: -40\n\t\t\t},\n\t\t\tstartAngle: -90,\n\t\t\tendAngle: 90,\n\t\t\tcenter: [ '50%', '75%' ]\n\t\t}\n\t},\n\tseries: [\n\t\t{\n\t\t\ttype: 'pie',\n\t\t\tname: 'Count',\n\t\t\tinnerSize: '50%',\n\t\t\tcolorByPoint: true,\n\t\t\tdata: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Confirmed',\n\t\t\t\t\tcolor: '#F9D93E',\n\t\t\t\t\ty: data.count[0].value || 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Recovered',\n\t\t\t\t\tcolor: '#4caf50',\n\t\t\t\t\ty: data.count[1].value || 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Deceased',\n\t\t\t\t\tcolor: '#e53935',\n\t\t\t\t\ty: data.count[2].value || 1\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\n\nexport default class Dashboard extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: [\n\t\t\t\t{ name: 'Total Confirmed', value: 0, class: 'yellow' },\n\t\t\t\t{ name: 'Total Recovered', value: 0, class: 'green' },\n\t\t\t\t{ name: 'Total Deceased', value: 0, class: 'red' }\n\t\t\t]\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\tconst responseConfirmed = await getCases('CONFIRMED');\n\t\t\tconst dataConfirmed = await readString(responseConfirmed);\n\t\t\tconst responseRecovered = await getCases('RECOVERED');\n\t\t\tconst dataRecovered = await readString(responseRecovered);\n\t\t\tconst responseDead = await getCases('DEATHS');\n\t\t\tconst dataDead = await readString(responseDead);\n\t\t\tif (dataConfirmed && dataRecovered && dataDead) {\n\t\t\t\tconst formattedConfirmed = formatDashboardData(dataConfirmed.data);\n\t\t\t\tconst formattedRecovered = formatDashboardData(dataRecovered.data);\n\t\t\t\tconst formattedDead = formatDashboardData(dataDead.data);\n\t\t\t\t// Creating dashboard count\n\t\t\t\tlet count = this.state.count;\n\t\t\t\tcount[0].value = formattedConfirmed;\n\t\t\t\tcount[1].value = formattedRecovered;\n\t\t\t\tcount[2].value = formattedDead;\n\t\t\t\tthis.setState({ count });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { count } = this.state;\n\t\tconst chartConfig = getConfig({ count });\n\n\t\treturn (\n\t\t\t<div className='dashboard-container'>\n\t\t\t\t<div className='tiles'>\n\t\t\t\t\t<Card className='tile'>\n\t\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\t\tcontainerProps={{ style: { minWidth: '375px', width: '100%' } }}\n\t\t\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\t\t\toptions={chartConfig}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Card>\n\n\t\t\t\t\t{this.state.count.map((item, index) => (\n\t\t\t\t\t\t<Card key={index} className='tile'>\n\t\t\t\t\t\t\t<div>{item.name}</div>\n\t\t\t\t\t\t\t<div className={item.class}>{item.value || 'Data is updating...'}</div>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { getDailyReport, formatDailyMarkers } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport './map.scss';\n\nconst { compose, withProps, withHandlers } = require('recompose');\nconst { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } = require('react-google-maps');\nconst { MarkerClusterer } = require('react-google-maps/lib/components/addons/MarkerClusterer');\n\nconst MapWithAMarkerClusterer = compose(\n\twithProps({\n\t\tgoogleMapURL:\n\t\t\t'https://maps.googleapis.com/maps/api/js?key=AIzaSyDEDlsTIDM12nZXq9_jrUZOJroDTeL0YS0&v=3.exp&libraries=geometry,drawing,places',\n\t\tloadingElement: <div style={{ height: `100%` }} />,\n\t\tcontainerElement: <div style={{ height: '100vh' }} />,\n\t\tmapElement: <div style={{ height: `100%` }} />\n\t}),\n\twithHandlers({\n\t\tonMarkerClustererClick: () => (markerClusterer) => {\n\t\t\tconst clickedMarkers = markerClusterer.getMarkers();\n\t\t\tconsole.log(`Current clicked markers length: ${clickedMarkers.length}`);\n\t\t\tconsole.log(clickedMarkers);\n\t\t}\n\t}),\n\twithScriptjs,\n\twithGoogleMap\n)((props) => (\n\t<GoogleMap defaultZoom={3} defaultCenter={{ lat: 25.0391667, lng: 121.525 }}>\n\t\t<MarkerClusterer onClick={props.onMarkerClustererClick} averageCenter enableRetinaIcons gridSize={60}>\n\t\t\t{props.markers.map((marker, index) => <CustomMarker key={index} marker={marker} />)}\n\t\t</MarkerClusterer>\n\t</GoogleMap>\n));\n\nexport default class MapsComponent extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmarkers: []\n\t\t};\n\t}\n\n\t/* onClick = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({\n\t\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t\t});\n\t\t}, 200);\n\t};\n\thandleMouseOver = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: true\n\t\t});\n\t};\n\thandleMouseExit = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: false\n\t\t});\n\t}; */\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\t// Get map data\n\t\t\tconst jsonResponse = await getDailyReport(false);\n\t\t\tconst dataJson = await readString(jsonResponse, { header: true });\n\t\t\tif (dataJson && dataJson.data) {\n\t\t\t\tthis.setState({ markers: formatDailyMarkers(dataJson.data) });\n\t\t\t\tconsole.log(this.state.markers);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{ width: '100%', height: '100vh' }}>\n\t\t\t\t<MapWithAMarkerClusterer markers={this.state.markers} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass CustomMarker extends Component {\n\tstate = {\n\t\tshowInfoWindow: false\n\t};\n\tonClick = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({\n\t\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t\t});\n\t\t}, 1000);\n\t};\n\thandleMouseOver = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: true\n\t\t});\n\t};\n\thandleMouseExit = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: false\n\t\t});\n\t};\n\trender() {\n\t\tconst { showInfoWindow } = this.state;\n\t\tconst { marker } = this.props;\n\t\treturn (\n\t\t\t<Marker\n\t\t\t\tposition={{ lat: marker.coordinates.latitude, lng: marker.coordinates.longitude }}\n\t\t\t\tonClick={this.onClick}\n\t\t\t\tonMouseOver={this.handleMouseOver}\n\t\t\t\tonMouseOut={this.handleMouseExit}>\n\t\t\t\t{showInfoWindow && (\n\t\t\t\t\t<InfoWindow>\n\t\t\t\t\t\t<div className='markerContainer'>\n\t\t\t\t\t\t\t<div className='yellow'>Confirmed: {marker.confirmed}</div>\n\t\t\t\t\t\t\t<div className='green'>Recovered: {marker.recovered}</div>\n\t\t\t\t\t\t\t<div className='red'>Deceased: {marker.dead}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</InfoWindow>\n\t\t\t\t)}\n\t\t\t</Marker>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HSIndicators from 'highcharts/indicators/indicators.js';\nimport HighchartsReact from 'highcharts-react-official';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { formatChartData, getCases, formatDropdownCountries } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport Card from '@material-ui/core/Card';\nimport './timeseries.scss';\n\nHSIndicators(Highcharts);\n\nconst getConfig = (data) => ({\n\ttitle: {\n\t\ttext: 'Confirmed/Recovered/Deceased By Country'\n\t},\n\tchart: {\n\t\ttype: 'spline'\n\t},\n\tyAxis: {\n\t\ttitle: { text: 'Total Count' }\n\t},\n\txAxis: {\n\t\tcategories: data.xAxis,\n\t\ttype: 'datetime',\n\t\tlabels: {\n\t\t\tformat: '{value:%e-%b}'\n\t\t}\n\t},\n\n\trangeSelector: {\n\t\tinputEnabled: false,\n\t\tbuttonSpacing: 10,\n\t\tbuttonTheme: {\n\t\t\t// styles for the buttons\n\t\t\tr: 8,\n\t\t\tfill: 'none',\n\t\t\tstroke: 'none',\n\t\t\twidth: 60,\n\t\t\theight: 18,\n\t\t\tstyle: {\n\t\t\t\tcolor: '#039',\n\t\t\t\tfontSize: '13px'\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\thover: {\n\t\t\t\t\tfill: '#333333',\n\t\t\t\t\tstroke: '#333333'\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tfill: '#039',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbuttons: [\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 10,\n\t\t\t\ttext: '10 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 20,\n\t\t\t\ttext: '20 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 30,\n\t\t\t\ttext: '30 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'all',\n\t\t\t\tcount: data.confirmedSeries.length - 1,\n\t\t\t\ttext: 'All'\n\t\t\t}\n\t\t]\n\t},\n\n\tseries: [ data.confirmedSeries, data.deadSeries, data.recoveredSeries ],\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\n\nexport default class TimeSeries extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.allowChartUpdate = true;\n\t\tthis.state = {\n\t\t\tcountry: { value: 'China', label: 'China' },\n\t\t\tcountries: [],\n\t\t\tconfirmedSeries: [],\n\t\t\tdeadSeries: [],\n\t\t\trecoveredSeries: [],\n\t\t\tcountConfirmed: 0,\n\t\t\tcountRecovered: 0,\n\t\t\tcountDead: 0,\n\t\t\txAxis: []\n\t\t};\n\n\t\tthis.createChart = this.createChart.bind(this);\n\t\tthis.updateCountry = this.updateCountry.bind(this);\n\t\t//this.renderChart = this.renderChart.bind(this);\n\t\t//this.renderLegends = this.renderLegends.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.createChart();\n\t}\n\n\tasync createChart() {\n\t\ttry {\n\t\t\tthis.allowChartUpdate = false;\n\n\t\t\tconst responseConfirmed = await getCases('CONFIRMED');\n\t\t\tconst dataConfirmed = await readString(responseConfirmed, { header: true });\n\n\t\t\tconst responseDeaths = await getCases('DEATHS');\n\t\t\tconst dataDeaths = await readString(responseDeaths, { header: true });\n\n\t\t\tconst responseRecovered = await getCases('RECOVERED');\n\t\t\tconst dataRecovered = await readString(responseRecovered, { header: true });\n\n\t\t\t//Dynamically set countries from confirmed dataset here since it does not work at setState line 145\n\t\t\tif (dataConfirmed) {\n\t\t\t\tlet uniqueCountries = formatDropdownCountries(dataConfirmed.data);\n\t\t\t\t// Making this drowpdown array here since formatDropdownCountries is being used as a common function for Bars as well\n\t\t\t\tconst countries = uniqueCountries.map((item) => {\n\t\t\t\t\treturn { label: item, value: item };\n\t\t\t\t});\n\t\t\t\tthis.setState({ countries });\n\t\t\t}\n\n\t\t\tif (dataConfirmed && dataDeaths && dataRecovered) {\n\t\t\t\tconst formattedConfirmed = formatChartData(dataConfirmed.data, this.state.country.value);\n\t\t\t\tconst formattedDeaths = formatChartData(dataDeaths.data, this.state.country.value);\n\t\t\t\tconst formattedRecovered = formatChartData(dataRecovered.data, this.state.country.value);\n\t\t\t\tlet seriesConfirmed = formattedConfirmed;\n\t\t\t\tseriesConfirmed.name = 'Confirmed';\n\t\t\t\tseriesConfirmed.color = '#fbc02d';\n\t\t\t\tlet seriesRecovered = formattedRecovered;\n\t\t\t\tseriesRecovered.name = 'Recovered';\n\t\t\t\tseriesRecovered.color = '#00c853';\n\t\t\t\tlet seriesDead = formattedDeaths;\n\t\t\t\tseriesDead.name = 'Deceased';\n\t\t\t\tseriesDead.color = '#f44336';\n\t\t\t\tthis.setState({\n\t\t\t\t\tconfirmedSeries: seriesConfirmed,\n\t\t\t\t\tdeadSeries: seriesDead,\n\t\t\t\t\trecoveredSeries: seriesRecovered,\n\t\t\t\t\tcountConfirmed: seriesConfirmed.data[seriesConfirmed.data.length - 1][1] || 0,\n\t\t\t\t\tcountDead: seriesDead.data[seriesDead.data.length - 1][1] || 0,\n\t\t\t\t\tcountRecovered: seriesRecovered.data[seriesRecovered.data.length - 1][1] || 0,\n\t\t\t\t\txAxis: seriesConfirmed.data.map((item) => {\n\t\t\t\t\t\treturn item[0];\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\tasync updateCountry(country) {\n\t\tthis.setState({ country });\n\t\tawait this.createChart();\n\t}\n\n\trender() {\n\t\tconst { confirmedSeries, recoveredSeries, deadSeries, xAxis, country, countries } = this.state;\n\t\tconst chartConfig = getConfig({ confirmedSeries, recoveredSeries, deadSeries, xAxis });\n\t\treturn (\n\t\t\t<div className='tiles'>\n\t\t\t\t<div className='tile'>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\toptions={countries}\n\t\t\t\t\t\tonChange={this.updateCountry}\n\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\tplaceholder='Select an option'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Card className='chart'>\n\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\tconstructorType={'stockChart'}\n\t\t\t\t\t\tcontainerProps={{ style: { minWidth: '375px', width: '90vw', height: '80vh' } }}\n\t\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\t\toptions={chartConfig}\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SwipeableViews from 'react-swipeable-views';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Bars from './components/bars/bars';\nimport Dashboard from './components/dashboard/dashboard';\nimport MapsComponent from './components/map/map';\nimport TimeSeries from './components/timeSeries/timeSeries';\n\nfunction TabPanel(props) {\n\tconst { children, value, index, ...other } = props;\n\n\treturn (\n\t\t<Typography\n\t\t\tcomponent='div'\n\t\t\trole='tabpanel'\n\t\t\thidden={value !== index}\n\t\t\tid={`full-width-tabpanel-${index}`}\n\t\t\taria-labelledby={`full-width-tab-${index}`}\n\t\t\t{...other}>\n\t\t\t{value === index && <Box p={3}>{children}</Box>}\n\t\t</Typography>\n\t);\n}\n\nTabPanel.propTypes = {\n\tchildren: PropTypes.node,\n\tindex: PropTypes.any.isRequired,\n\tvalue: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n\treturn {\n\t\tid: `full-width-tab-${index}`,\n\t\t'aria-controls': `full-width-tabpanel-${index}`\n\t};\n}\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tbackgroundColor: '#e0e0e0',\n\t\tpadding: '0'\n\t}\n}));\n\nexport default function App() {\n\tconst classes = useStyles();\n\tconst theme = useTheme();\n\tconst [ value, setValue ] = React.useState(0);\n\n\tconst handleChange = (event, newValue) => {\n\t\tsetValue(newValue);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar position='static' color='default'>\n\t\t\t\t<Tabs centered value={value} onChange={handleChange} indicatorColor='primary' textColor='primary'>\n\t\t\t\t\t<Tab label='Dashboard' {...a11yProps(0)} />\n\t\t\t\t\t<Tab label='Heat Map' {...a11yProps(1)} />\n\t\t\t\t\t<Tab label='Top 10' {...a11yProps(2)} />\n\t\t\t\t\t<Tab label='Time Series' {...a11yProps(3)} />\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t\t<TabPanel value={value} index={0}>\n\t\t\t\t<Dashboard />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={value} index={1}>\n\t\t\t\t<MapsComponent />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={value} index={2}>\n\t\t\t\t<Bars />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={value} index={3}>\n\t\t\t\t<TimeSeries />\n\t\t\t</TabPanel>\n\t\t</div>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}