{"version":3,"sources":["assets/images/rsz_covid.png","services/FetchData.js","components/bars/bars.js","components/dashboard/dashboard.js","components/map/map.js","components/timeSeries/timeSeries.js","components/globe/globe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCases","type","fetch","CONFIRMED","DEATHS","RECOVERED","then","res","text","getDailyReport","useTodayDate","date","getTodayDate","getYesterdayDate","url","status","Date","setDate","getDate","dd","mm","getMonth","yyyy","getFullYear","formatChartData","data","country","filteredByCountry","filter","item","length","formatArraySeries","formatChartSingleSeries","formatDashboardData","shift","map","count","reduce","previousValue","currentValue","parseInt","removeProperties","arr","forEach","name","arrValues","keys","Object","seriesData","key","val","push","getTime","sum","row","isNaN","formatByCountry","dataArr","confirmed","dead","recovered","countries","formatedCountries","dataByCountries","dataSumByCountries","countryArr","countrySum","formatSeries","formatted","deceased","sort","a","b","slice","series","color","formatDropdownCountries","uniqueCountries","indexOf","Bars","props","Highcharts","setOptions","lang","thousandsSep","allowChartUpdate","state","createChart","bind","this","jsonResponse","readString","header","dataJson","formattedFinal","setState","console","warn","chartConfig","chart","height","title","xAxis","categories","legend","reversed","plotOptions","bar","dataLabels","enabled","groupPadding","credits","exporting","className","containerProps","style","minWidth","width","highcharts","options","React","Component","Dashboard","value","class","responseConfirmed","dataConfirmed","responseRecovered","dataRecovered","responseDead","dataDead","formattedConfirmed","formattedRecovered","formattedDead","plotBackgroundColor","plotBorderWidth","plotShadow","align","verticalAlign","y","tooltip","pointFormat","pie","size","allowPointSelect","format","distance","startAngle","endAngle","center","innerSize","colorByPoint","Card","index","Intl","NumberFormat","require","compose","withProps","withHandlers","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","MarkerClusterer","MapWithAMarkerClusterer","googleMapURL","loadingElement","containerElement","mapElement","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","log","defaultZoom","defaultCenter","lat","lng","onClick","averageCenter","enableRetinaIcons","gridSize","markers","marker","MapsComponent","region","coordinates","latitude","parseFloat","longitude","PureComponent","CustomMarker","showInfoWindow","e","setTimeout","handleMouseOver","handleMouseExit","position","onMouseOver","onMouseOut","HSIndicators","TimeSeries","label","confirmedSeries","deadSeries","recoveredSeries","countConfirmed","countRecovered","countDead","updateCountry","responseDeaths","dataDeaths","formattedDeaths","seriesConfirmed","seriesRecovered","seriesDead","yAxis","opposite","labels","rangeSelector","inputEnabled","buttonSpacing","buttonTheme","r","fill","stroke","fontSize","states","hover","select","buttons","onChange","placeholder","constructorType","getTooltipContent","TabPanel","children","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","backgroundColor","padding","App","classes","useState","setValue","imageUrl","AppBar","Toolbar","src","alt","variant","Tabs","centered","event","newValue","indicatorColor","textColor","Tab","target","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.386f1afe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rsz_covid.9cedadc4.png\";","export const getCases = (type) => {\n\tconst URLS = {\n\t\tCONFIRMED:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv',\n\t\tDEATHS:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv',\n\t\tRECOVERED:\n\t\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'\n\t};\n\treturn fetch(URLS[type]).then((res) => res.text());\n};\n\nexport const getDailyReport = (useTodayDate) => {\n\tconst date = useTodayDate ? getTodayDate() : getYesterdayDate();\n\n\tconst url = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`;\n\treturn fetch(url).then((res) => {\n\t\t// If today's data exist then 200 will be returned\n\t\treturn res.status === 200 ? res.text() : res.status;\n\t});\n};\n\nexport const formatMarkers = (data) => {\n\tconst result = data.map((item) => {\n\t\treturn {\n\t\t\ttitle: `${item['Province/State']} - ${item['Country_Region']}`,\n\t\t\tcoordinates: {\n\t\t\t\tlatitude: parseFloat(item['Lat']),\n\t\t\t\tlongitude: parseFloat(item['Long'])\n\t\t\t}\n\t\t};\n\t});\n\treturn result;\n};\n\nexport const formatDailyMarkers = (data) => {\n\t//console.log(data);\n\tconst result = data.map((item) => {\n\t\treturn {\n\t\t\tcountry: item['Country_Region'],\n\t\t\tregion: item['Province/State'],\n\t\t\tcoordinates: {\n\t\t\t\tlatitude: parseFloat(item['Lat']) || 0,\n\t\t\t\tlongitude: parseFloat(item['Long_']) || 0\n\t\t\t},\n\t\t\tconfirmed: item['Confirmed'],\n\t\t\tdead: item['Deaths'],\n\t\t\trecovered: item['Recovered']\n\t\t};\n\t});\n\treturn result;\n};\n\nexport const formatGlobeMarkers = (data) => {\n\tconst result = data.map((item) => {\n\t\treturn {\n\t\t\tcountry: item['Country_Region'],\n\t\t\tregion: item['Province/State'],\n\t\t\tcoordinates: [ parseFloat(item['Lat']) || 0, parseFloat(item['Long_']) || 0 ],\n\t\t\tvalue: item['Confirmed'] / 100,\n\t\t\tconfirmed: item['Confirmed'],\n\t\t\tdead: item['Deaths'],\n\t\t\trecovered: item['Recovered']\n\t\t};\n\t});\n\treturn result;\n};\n\nexport const getYesterdayDate = () => {\n\tlet date = new Date();\n\tdate.setDate(date.getDate() - 1);\n\tlet dd = date.getDate();\n\tdd = dd > 9 ? dd : '0' + dd;\n\tlet mm = date.getMonth() + 1;\n\tmm = mm > 9 ? mm : '0' + mm;\n\tlet yyyy = date.getFullYear();\n\treturn `${mm}-${dd}-${yyyy}`;\n};\n\nexport const getTodayDate = () => {\n\tlet date = new Date();\n\tdate.setDate(date.getDate());\n\tlet dd = date.getDate();\n\tdd = dd > 9 ? dd : '0' + dd;\n\tlet mm = date.getMonth() + 1;\n\tmm = mm > 9 ? mm : '0' + mm;\n\tlet yyyy = date.getFullYear();\n\treturn `${mm}-${dd}-${yyyy}`;\n};\n\nexport const formatChartData = (data, country) => {\n\tconst filteredByCountry = data.filter((item) => {\n\t\treturn item['Country/Region'] === country;\n\t});\n\tconst formatted =\n\t\tdata.length > 1 ? formatArraySeries(filteredByCountry) : formatChartSingleSeries(filteredByCountry[0]);\n\treturn formatted;\n};\n\nexport const formatDashboardData = (data) => {\n\tdata.shift();\n\tlet cleaned = data.map((item) => {\n\t\treturn { country: item[1], count: item[item.length - 1] };\n\t});\n\tlet count = cleaned.reduce((previousValue, currentValue) => {\n\t\treturn { count: (parseInt(previousValue.count) || 0) + (parseInt(currentValue.count) || 0) };\n\t}).count;\n\treturn count;\n};\n\nexport const removeProperties = (arr) => {\n\tarr.forEach((item) => {\n\t\tdelete item['Lat'];\n\t\tdelete item['Long'];\n\t\tdelete item['Province/State'];\n\t\tdelete item['Country/Region'];\n\t});\n\treturn arr;\n};\n\nexport const formatChartSingleSeries = (arr) => {\n\tconst name = arr['Country/Region'];\n\t// Remove unwanted properties\n\tconst arrValues = removeProperties([ arr ])[0];\n\tlet keys = Object.keys(arr);\n\tlet seriesData = [];\n\tkeys.forEach((key) => {\n\t\tconst val = arrValues[key];\n\t\tseriesData.push([ new Date(key).getTime(), val ]);\n\t});\n\tlet seriesObj = { name: name, data: seriesData };\n\treturn seriesObj;\n};\n\nexport const formatArraySeries = (arr) => {\n\tconst name = arr[0]['Country_Region'];\n\tconst arrValues = removeProperties(arr);\n\tlet keys = Object.keys(arrValues[0]);\n\tlet seriesData = [];\n\tkeys.forEach((key) => {\n\t\tlet sum = 0;\n\t\tarrValues.forEach((row) => {\n\t\t\tlet val = parseInt(row[key]);\n\t\t\tsum += !isNaN(val) ? parseInt(row[key]) : 0;\n\t\t});\n\t\tseriesData.push([ new Date(key).getTime(), sum ]);\n\t});\n\tlet seriesObj = { name: name, data: seriesData };\n\treturn seriesObj;\n};\n\nexport const getCountries = () => {\n\tlet countries = getCountryArr();\n\n\treturn countries.sort().map((val) => {\n\t\treturn {\n\t\t\tlabel: val,\n\t\t\tvalue: val\n\t\t};\n\t});\n};\n\nexport const formatByCountry = (dataArr) => {\n\tlet data = dataArr.map((item) => {\n\t\treturn {\n\t\t\tcountry: item['Country_Region'],\n\t\t\tconfirmed: parseInt(item['Confirmed']) || 0,\n\t\t\tdead: parseInt(item['Deaths']) || 0,\n\t\t\trecovered: parseInt(item['Recovered']) || 0\n\t\t};\n\t});\n\t// Dynamically getting countries from data\n\tlet countries = formatedCountries(data);\n\n\tlet dataByCountries = [];\n\tcountries.forEach((country) => {\n\t\tconst filteredByCountry = data.filter((item) => {\n\t\t\treturn item.country === country;\n\t\t});\n\t\tdataByCountries.push(filteredByCountry);\n\t});\n\n\tlet dataSumByCountries = [];\n\tdataByCountries.forEach((countryArr) => {\n\t\tif (countryArr && countryArr.length) {\n\t\t\tlet countrySum = countryArr.reduce((previousValue, currentValue) => {\n\t\t\t\treturn {\n\t\t\t\t\tcountry: previousValue.country,\n\t\t\t\t\tconfirmed: parseInt(previousValue.confirmed) + parseInt(currentValue.confirmed),\n\t\t\t\t\tdead: previousValue.dead + currentValue.dead,\n\t\t\t\t\trecovered: previousValue.recovered + currentValue.recovered\n\t\t\t\t};\n\t\t\t});\n\t\t\tdataSumByCountries.push(countrySum);\n\t\t}\n\t});\n\treturn dataSumByCountries;\n};\n\nexport const formatSeries = (formatted) => {\n\tconst limit = 15;\n\tlet confirmed = [];\n\tlet recovered = [];\n\tlet deceased = [];\n\tformatted.sort((a, b) => {\n\t\t//Sort descending\n\t\treturn b.confirmed - a.confirmed;\n\t});\n\t// Get top 10 countries for chart config\n\tlet countries = formatted\n\t\t.map((item) => {\n\t\t\treturn item.country;\n\t\t})\n\t\t.slice(0, limit);\n\tformatted.forEach((item) => {\n\t\tconfirmed.push(item.confirmed);\n\t\trecovered.push(item.recovered);\n\t\tdeceased.push(item.dead);\n\t});\n\tlet series = [];\n\t// Get top 10 countries data for chart\n\tseries.push({ name: 'Confirmed', data: confirmed.slice(0, limit), color: '#F9D93E' });\n\tseries.push({ name: 'Recovered', data: recovered.slice(0, limit), color: '#4caf50' });\n\tseries.push({ name: 'Deceased', data: deceased.slice(0, limit), color: '#e53935' });\n\treturn { series: series, countries: countries };\n};\n\nexport const getCountryArr = () => {\n\treturn [\n\t\t'Thailand',\n\t\t'Japan',\n\t\t'Singapore',\n\t\t'Nepal',\n\t\t'Malaysia',\n\t\t'Canada',\n\t\t'Australia',\n\t\t'Cambodia',\n\t\t'Sri Lanka',\n\t\t'Germany',\n\t\t'Finland',\n\t\t'United Arab Emirates',\n\t\t'Philippines',\n\t\t'India',\n\t\t'Italy',\n\t\t'Sweden',\n\t\t'Spain',\n\t\t'Belgium',\n\t\t'Egypt',\n\t\t'Lebanon',\n\t\t'Iraq',\n\t\t'Oman',\n\t\t'Afghanistan',\n\t\t'Bahrain',\n\t\t'Kuwait',\n\t\t'Algeria',\n\t\t'Croatia',\n\t\t'Switzerland',\n\t\t'Austria',\n\t\t'Israel',\n\t\t'Pakistan',\n\t\t'Brazil',\n\t\t'Georgia',\n\t\t'Greece',\n\t\t'North Macedonia',\n\t\t'Norway',\n\t\t'Romania',\n\t\t'Estonia',\n\t\t'San Marino',\n\t\t'Belarus',\n\t\t'Iceland',\n\t\t'Lithuania',\n\t\t'Mexico',\n\t\t'New Zealand',\n\t\t'Nigeria',\n\t\t'Ireland',\n\t\t'Luxembourg',\n\t\t'Monaco',\n\t\t'Qatar',\n\t\t'Ecuador',\n\t\t'Azerbaijan',\n\t\t'Armenia',\n\t\t'Dominican Republic',\n\t\t'Indonesia',\n\t\t'Portugal',\n\t\t'Andorra',\n\t\t'Latvia',\n\t\t'Morocco',\n\t\t'Saudi Arabia',\n\t\t'Senegal',\n\t\t'Argentina',\n\t\t'Chile',\n\t\t'Jordan',\n\t\t'Ukraine',\n\t\t'Hungary',\n\t\t'Liechtenstein',\n\t\t'Poland',\n\t\t'Tunisia',\n\t\t'Bosnia and Herzegovina',\n\t\t'Slovenia',\n\t\t'South Africa',\n\t\t'Bhutan',\n\t\t'Cameroon',\n\t\t'Colombia',\n\t\t'Costa Rica',\n\t\t'Peru',\n\t\t'Serbia',\n\t\t'Slovakia',\n\t\t'Togo',\n\t\t'Malta',\n\t\t'Martinique',\n\t\t'Bulgaria',\n\t\t'Maldives',\n\t\t'Bangladesh',\n\t\t'Paraguay',\n\t\t'Albania',\n\t\t'Cyprus',\n\t\t'Brunei',\n\t\t'US',\n\t\t'Burkina Faso',\n\t\t'Holy See',\n\t\t'Mongolia',\n\t\t'Panama',\n\t\t'China',\n\t\t'Iran',\n\t\t'Korea, South',\n\t\t'France',\n\t\t'Cruise Ship',\n\t\t'Denmark',\n\t\t'Czechia',\n\t\t'Taiwan*',\n\t\t'Vietnam',\n\t\t'Russia',\n\t\t'Moldova',\n\t\t'Bolivia',\n\t\t'Honduras',\n\t\t'United Kingdom',\n\t\t'Congo (Kinshasa)',\n\t\t\"Cote d'Ivoire\",\n\t\t'Jamaica',\n\t\t'Turkey',\n\t\t'Cuba',\n\t\t'Guyana',\n\t\t'Kazakhstan',\n\t\t'Ethiopia',\n\t\t'Sudan',\n\t\t'Guinea',\n\t\t'Kenya',\n\t\t'Antigua and Barbuda',\n\t\t'Uruguay',\n\t\t'Ghana',\n\t\t'Namibia',\n\t\t'Seychelles',\n\t\t'Trinidad and Tobago',\n\t\t'Venezuela',\n\t\t'Eswatini',\n\t\t'Gabon',\n\t\t'Guatemala',\n\t\t'Mauritania',\n\t\t'Rwanda',\n\t\t'Saint Lucia',\n\t\t'Saint Vincent and the Grenadines',\n\t\t'Suriname',\n\t\t'Kosovo',\n\t\t'Central African Republic',\n\t\t'Congo (Brazzaville)',\n\t\t'Equatorial Guinea',\n\t\t'Uzbekistan',\n\t\t'Netherlands',\n\t\t'Benin',\n\t\t'Liberia',\n\t\t'Somalia',\n\t\t'Tanzania',\n\t\t'Barbados',\n\t\t'Montenegro',\n\t\t'Kyrgyzstan',\n\t\t'Mauritius',\n\t\t'Zambia',\n\t\t'Djibouti',\n\t\t'Gambia, The',\n\t\t'Bahamas, The',\n\t\t'Chad',\n\t\t'El Salvador',\n\t\t'Fiji',\n\t\t'Nicaragua'\n\t];\n};\n\nexport const getTotals = (markers) => {\n\tlet totals = {\n\t\ttotalConfirmed: 0,\n\t\ttotalDead: 0,\n\t\ttotalRecovered: 0\n\t};\n\tif (markers && markers.length) {\n\t\tmarkers.forEach((marker) => {\n\t\t\ttotals.totalConfirmed += parseInt(marker.confirmed) ? parseInt(marker.confirmed) : 0;\n\t\t\ttotals.totalDead += parseInt(marker.dead) ? parseInt(marker.dead) : 0;\n\t\t\ttotals.totalRecovered += parseInt(marker.recovered) ? parseInt(marker.recovered) : 0;\n\t\t});\n\t}\n\treturn totals;\n};\n\nexport const formatDropdownCountries = (data) => {\n\tlet countries = [];\n\tdata.forEach((item) => {\n\t\tcountries.push(item['Country/Region']);\n\t});\n\tlet uniqueCountries = [];\n\tcountries.forEach((item) => {\n\t\tif (item && uniqueCountries.indexOf(item) < 0) uniqueCountries.push(item);\n\t});\n\tuniqueCountries.sort();\n\treturn uniqueCountries;\n};\n\nexport const formatedCountries = (data) => {\n\tlet countries = [];\n\tdata.forEach((item) => {\n\t\tcountries.push(item.country);\n\t});\n\tlet uniqueCountries = [];\n\tcountries.forEach((item) => {\n\t\tif (item && uniqueCountries.indexOf(item) < 0) uniqueCountries.push(item);\n\t});\n\tuniqueCountries.sort();\n\treturn uniqueCountries;\n};\n","import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { getDailyReport, formatByCountry, formatSeries } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport './bars.scss';\n\nconst getConfig = (data) => ({\n\tchart: {\n\t\ttype: 'bar',\n\t\theight: '100%'\n\t},\n\ttitle: {\n\t\ttext: 'Top 15 Affected Countries'\n\t},\n\txAxis: {\n\t\tcategories: data.countries\n\t},\n\tlegend: {\n\t\treversed: false\n\t},\n\tplotOptions: {\n\t\tbar: {\n\t\t\tdataLabels: {\n\t\t\t\tenabled: true\n\t\t\t},\n\t\t\tgroupPadding: 0.2\n\t\t}\n\t},\n\tseries: data.series,\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\nexport default class Bars extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tHighcharts.setOptions({\n\t\t\tlang: {\n\t\t\t\tthousandsSep: ','\n\t\t\t}\n\t\t});\n\t\tthis.allowChartUpdate = true;\n\t\tthis.state = {\n\t\t\tseries: [],\n\t\t\tcountries: []\n\t\t};\n\t\tthis.createChart = this.createChart.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.createChart();\n\t}\n\n\tasync createChart() {\n\t\ttry {\n\t\t\tthis.allowChartUpdate = false;\n\t\t\tconst jsonResponse = await getDailyReport(false);\n\t\t\tconst dataJson = await readString(jsonResponse, { header: true });\n\t\t\tif (dataJson) {\n\t\t\t\tconst formatted = formatByCountry(dataJson.data);\n\t\t\t\tconst formattedFinal = formatSeries(formatted);\n\t\t\t\tthis.setState({ series: formattedFinal.series, countries: formattedFinal.countries });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { series, countries } = this.state;\n\t\tconst chartConfig = getConfig({ series, countries });\n\t\treturn (\n\t\t\t<div className='card'>\n\t\t\t\t<HighchartsReact\n\t\t\t\t\tcontainerProps={{\n\t\t\t\t\t\tstyle: { minWidth: '375px', width: '100%' }\n\t\t\t\t\t}}\n\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\toptions={chartConfig}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './dashboard.scss';\nimport Card from '@material-ui/core/Card';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { formatDashboardData, getCases } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\n\nconst getConfig = (data) => ({\n\tchart: {\n\t\tplotBackgroundColor: null,\n\t\tplotBorderWidth: null,\n\t\tplotShadow: false\n\t},\n\ttitle: {\n\t\ttext: '<b>Total Cases</b>',\n\t\talign: 'center',\n\t\tverticalAlign: 'middle',\n\t\ty: 100\n\t},\n\ttooltip: {\n\t\tpointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n\t},\n\tplotOptions: {\n\t\tpie: {\n\t\t\tsize: 350,\n\t\t\tallowPointSelect: true,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: true,\n\t\t\t\tformat: '<b>{point.name}</b>: {point.percentage:.1f} %',\n\t\t\t\tdistance: -40\n\t\t\t},\n\t\t\tstartAngle: -90,\n\t\t\tendAngle: 90,\n\t\t\tcenter: [ '50%', '75%' ]\n\t\t}\n\t},\n\tseries: [\n\t\t{\n\t\t\ttype: 'pie',\n\t\t\tname: 'Count',\n\t\t\tinnerSize: '50%',\n\t\t\tcolorByPoint: true,\n\t\t\tdata: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Confirmed',\n\t\t\t\t\tcolor: '#F9D93E',\n\t\t\t\t\ty: data.count[0].value || 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Recovered',\n\t\t\t\t\tcolor: '#4caf50',\n\t\t\t\t\ty: data.count[1].value || 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Deceased',\n\t\t\t\t\tcolor: '#e53935',\n\t\t\t\t\ty: data.count[2].value || 1\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\n\nexport default class Dashboard extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: [\n\t\t\t\t{ name: 'Total Confirmed', value: 0, class: 'yellow' },\n\t\t\t\t{ name: 'Total Recovered', value: 0, class: 'green' },\n\t\t\t\t{ name: 'Total Deceased', value: 0, class: 'red' }\n\t\t\t]\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\tconst responseConfirmed = await getCases('CONFIRMED');\n\t\t\tconst dataConfirmed = await readString(responseConfirmed);\n\t\t\tconst responseRecovered = await getCases('RECOVERED');\n\t\t\tconst dataRecovered = await readString(responseRecovered);\n\t\t\tconst responseDead = await getCases('DEATHS');\n\t\t\tconst dataDead = await readString(responseDead);\n\t\t\tif (dataConfirmed && dataRecovered && dataDead) {\n\t\t\t\tconst formattedConfirmed = formatDashboardData(dataConfirmed.data);\n\t\t\t\tconst formattedRecovered = formatDashboardData(dataRecovered.data);\n\t\t\t\tconst formattedDead = formatDashboardData(dataDead.data);\n\t\t\t\t// Creating dashboard count\n\t\t\t\tlet count = this.state.count;\n\t\t\t\tcount[0].value = formattedConfirmed;\n\t\t\t\tcount[1].value = formattedRecovered;\n\t\t\t\tcount[2].value = formattedDead;\n\t\t\t\tthis.setState({ count });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { count } = this.state;\n\t\tconst chartConfig = getConfig({ count });\n\n\t\treturn (\n\t\t\t<div className='dashboard-container'>\n\t\t\t\t<div className='tiles'>\n\t\t\t\t\t<Card className='tile'>\n\t\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\t\tcontainerProps={{ style: { minWidth: '375px', width: '100%' } }}\n\t\t\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\t\t\toptions={chartConfig}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Card>\n\n\t\t\t\t\t{this.state.count.map((item, index) => (\n\t\t\t\t\t\t<Card key={index} className='tile'>\n\t\t\t\t\t\t\t<div>{item.name}</div>\n\t\t\t\t\t\t\t<div className={item.class}>\n\t\t\t\t\t\t\t\t{new Intl.NumberFormat('en-US').format(item.value) || 'Data is updating...'}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { getDailyReport, formatDailyMarkers } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport './map.scss';\n\nconst { compose, withProps, withHandlers } = require('recompose');\nconst { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } = require('react-google-maps');\nconst { MarkerClusterer } = require('react-google-maps/lib/components/addons/MarkerClusterer');\n\nconst MapWithAMarkerClusterer = compose(\n\twithProps({\n\t\tgoogleMapURL:\n\t\t\t'https://maps.googleapis.com/maps/api/js?key=AIzaSyDEDlsTIDM12nZXq9_jrUZOJroDTeL0YS0&v=3.exp&libraries=geometry,drawing,places',\n\t\tloadingElement: <div style={{ height: `100%` }} />,\n\t\tcontainerElement: <div style={{ height: '100vh' }} />,\n\t\tmapElement: <div style={{ height: `100%` }} />\n\t}),\n\twithHandlers({\n\t\tonMarkerClustererClick: () => (markerClusterer) => {\n\t\t\tconst clickedMarkers = markerClusterer.getMarkers();\n\t\t\tconsole.log(`Current clicked markers length: ${clickedMarkers.length}`);\n\t\t\tconsole.log(clickedMarkers);\n\t\t}\n\t}),\n\twithScriptjs,\n\twithGoogleMap\n)((props) => (\n\t<GoogleMap defaultZoom={3} defaultCenter={{ lat: 25.0391667, lng: 121.525 }}>\n\t\t<MarkerClusterer onClick={props.onMarkerClustererClick} averageCenter enableRetinaIcons gridSize={60}>\n\t\t\t{props.markers.map((marker, index) => <CustomMarker key={index} marker={marker} />)}\n\t\t</MarkerClusterer>\n\t</GoogleMap>\n));\n\nexport default class MapsComponent extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmarkers: []\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\t// Get map data\n\t\t\tconst jsonResponse = await getDailyReport(false);\n\t\t\tconst dataJson = await readString(jsonResponse, { header: true });\n\t\t\tif (dataJson && dataJson.data) {\n\t\t\t\tthis.setState({ markers: formatDailyMarkers(dataJson.data) });\n\t\t\t\t//console.log(this.state.markers);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{ width: '100%', height: '100vh' }}>\n\t\t\t\t<MapWithAMarkerClusterer markers={this.state.markers} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass CustomMarker extends Component {\n\tstate = {\n\t\tshowInfoWindow: false\n\t};\n\tonClick = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({\n\t\t\t\tshowInfoWindow: !this.state.showInfoWindow\n\t\t\t});\n\t\t}, 1000);\n\t};\n\thandleMouseOver = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: true\n\t\t});\n\t};\n\thandleMouseExit = (e) => {\n\t\tthis.setState({\n\t\t\tshowInfoWindow: false\n\t\t});\n\t};\n\trender() {\n\t\tconst { showInfoWindow } = this.state;\n\t\tconst { marker } = this.props;\n\t\treturn (\n\t\t\t<Marker\n\t\t\t\tposition={{ lat: marker.coordinates.latitude, lng: marker.coordinates.longitude }}\n\t\t\t\tonClick={this.onClick}\n\t\t\t\tonMouseOver={this.handleMouseOver}\n\t\t\t\tonMouseOut={this.handleMouseExit}>\n\t\t\t\t{showInfoWindow && (\n\t\t\t\t\t<InfoWindow>\n\t\t\t\t\t\t<div className='markerContainer'>\n\t\t\t\t\t\t\t<div className='yellow'>\n\t\t\t\t\t\t\t\tConfirmed: {new Intl.NumberFormat('en-US').format(marker.confirmed)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='green'>\n\t\t\t\t\t\t\t\tRecovered: {new Intl.NumberFormat('en-US').format(marker.recovered)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='red'>Deceased: {new Intl.NumberFormat('en-US').format(marker.dead)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</InfoWindow>\n\t\t\t\t)}\n\t\t\t</Marker>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HSIndicators from 'highcharts/indicators/indicators.js';\nimport HighchartsReact from 'highcharts-react-official';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { formatChartData, getCases, formatDropdownCountries } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\nimport Card from '@material-ui/core/Card';\nimport './timeseries.scss';\n\nHSIndicators(Highcharts);\n\nconst getConfig = (data) => ({\n\ttitle: {\n\t\ttext: 'Confirmed/Recovered/Deceased By Country'\n\t},\n\tchart: {\n\t\ttype: 'spline'\n\t},\n\tyAxis: {\n\t\ttitle: { text: 'Total Count' },\n\t\topposite: false\n\t},\n\txAxis: {\n\t\tcategories: data.xAxis,\n\t\ttype: 'datetime',\n\t\tlabels: {\n\t\t\tformat: '{value:%e-%b}'\n\t\t}\n\t},\n\n\trangeSelector: {\n\t\tinputEnabled: false,\n\t\tbuttonSpacing: 10,\n\t\tbuttonTheme: {\n\t\t\t// styles for the buttons\n\t\t\tr: 8,\n\t\t\tfill: 'none',\n\t\t\tstroke: 'none',\n\t\t\twidth: 60,\n\t\t\theight: 18,\n\t\t\tstyle: {\n\t\t\t\tcolor: '#039',\n\t\t\t\tfontSize: '13px'\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\thover: {\n\t\t\t\t\tfill: '#333333',\n\t\t\t\t\tstroke: '#333333'\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tfill: '#039',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbuttons: [\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 10,\n\t\t\t\ttext: '10 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 20,\n\t\t\t\ttext: '20 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'day',\n\t\t\t\tcount: 30,\n\t\t\t\ttext: '30 Days'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'all',\n\t\t\t\tcount: data.confirmedSeries.length - 1,\n\t\t\t\ttext: 'All'\n\t\t\t}\n\t\t]\n\t},\n\tseries: [ data.confirmedSeries, data.deadSeries, data.recoveredSeries ],\n\tcredits: {\n\t\tenabled: false\n\t},\n\texporting: {\n\t\tenabled: false\n\t}\n});\n\nexport default class TimeSeries extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tHighcharts.setOptions({\n\t\t\tlang: {\n\t\t\t\tthousandsSep: ','\n\t\t\t}\n\t\t});\n\t\tthis.allowChartUpdate = true;\n\t\tthis.state = {\n\t\t\tcountry: { value: 'China', label: 'China' },\n\t\t\tcountries: [],\n\t\t\tconfirmedSeries: [],\n\t\t\tdeadSeries: [],\n\t\t\trecoveredSeries: [],\n\t\t\tcountConfirmed: 0,\n\t\t\tcountRecovered: 0,\n\t\t\tcountDead: 0,\n\t\t\txAxis: []\n\t\t};\n\n\t\tthis.createChart = this.createChart.bind(this);\n\t\tthis.updateCountry = this.updateCountry.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.createChart();\n\t}\n\n\tasync createChart() {\n\t\ttry {\n\t\t\tthis.allowChartUpdate = false;\n\n\t\t\tconst responseConfirmed = await getCases('CONFIRMED');\n\t\t\tconst dataConfirmed = await readString(responseConfirmed, { header: true });\n\n\t\t\tconst responseDeaths = await getCases('DEATHS');\n\t\t\tconst dataDeaths = await readString(responseDeaths, { header: true });\n\n\t\t\tconst responseRecovered = await getCases('RECOVERED');\n\t\t\tconst dataRecovered = await readString(responseRecovered, { header: true });\n\n\t\t\t//Dynamically set countries from confirmed dataset here since it does not work at setState line 145\n\t\t\tif (dataConfirmed) {\n\t\t\t\tlet uniqueCountries = formatDropdownCountries(dataConfirmed.data);\n\t\t\t\t// Making this drowpdown array here since formatDropdownCountries is being used as a common function for Bars as well\n\t\t\t\tconst countries = uniqueCountries.map((item) => {\n\t\t\t\t\treturn { label: item, value: item };\n\t\t\t\t});\n\t\t\t\tthis.setState({ countries });\n\t\t\t}\n\n\t\t\tif (dataConfirmed && dataDeaths && dataRecovered) {\n\t\t\t\tconst formattedConfirmed = formatChartData(dataConfirmed.data, this.state.country.value);\n\t\t\t\tconst formattedDeaths = formatChartData(dataDeaths.data, this.state.country.value);\n\t\t\t\tconst formattedRecovered = formatChartData(dataRecovered.data, this.state.country.value);\n\t\t\t\tlet seriesConfirmed = formattedConfirmed;\n\t\t\t\tseriesConfirmed.name = 'Confirmed';\n\t\t\t\tseriesConfirmed.color = '#fbc02d';\n\t\t\t\tlet seriesRecovered = formattedRecovered;\n\t\t\t\tseriesRecovered.name = 'Recovered';\n\t\t\t\tseriesRecovered.color = '#00c853';\n\t\t\t\tlet seriesDead = formattedDeaths;\n\t\t\t\tseriesDead.name = 'Deceased';\n\t\t\t\tseriesDead.color = '#f44336';\n\t\t\t\tthis.setState({\n\t\t\t\t\tconfirmedSeries: seriesConfirmed,\n\t\t\t\t\tdeadSeries: seriesDead,\n\t\t\t\t\trecoveredSeries: seriesRecovered,\n\t\t\t\t\tcountConfirmed: seriesConfirmed.data[seriesConfirmed.data.length - 1][1] || 0,\n\t\t\t\t\tcountDead: seriesDead.data[seriesDead.data.length - 1][1] || 0,\n\t\t\t\t\tcountRecovered: seriesRecovered.data[seriesRecovered.data.length - 1][1] || 0,\n\t\t\t\t\txAxis: seriesConfirmed.data.map((item) => {\n\t\t\t\t\t\treturn item[0];\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\tasync updateCountry(country) {\n\t\tthis.setState({ country });\n\t\tawait this.createChart();\n\t}\n\n\trender() {\n\t\tconst { confirmedSeries, recoveredSeries, deadSeries, xAxis, country, countries } = this.state;\n\t\tconst chartConfig = getConfig({ confirmedSeries, recoveredSeries, deadSeries, xAxis });\n\t\treturn (\n\t\t\t<div className='tiles'>\n\t\t\t\t<div className='tile'>\n\t\t\t\t\t<div className='card-drop'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tSelect a country from the dropdown below to view a time series of confirmed, recovered and\n\t\t\t\t\t\t\tdeceased cases on a daily basis.<br /> Time series window can be updated on the chart using\n\t\t\t\t\t\t\tthe zoom buttons and the sliders below the chart.\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\toptions={countries}\n\t\t\t\t\t\t\tonChange={this.updateCountry}\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\tplaceholder='Select an option'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Card className='chart'>\n\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\tconstructorType={'stockChart'}\n\t\t\t\t\t\tcontainerProps={{ style: { minWidth: '375px', width: '90vw', height: '80vh' } }}\n\t\t\t\t\t\thighcharts={Highcharts}\n\t\t\t\t\t\toptions={chartConfig}\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactGlobe from 'react-globe';\nimport { getDailyReport, formatGlobeMarkers } from '../../services/FetchData';\nimport { readString } from 'react-papaparse';\n\nconst getTooltipContent = (marker) => {\n\treturn `${marker.country}\n    Confirmed:${marker.confirmed},\n    Recovered: ${marker.recovered},\n    Deceased: ${marker.dead}`;\n};\n\nconst globe = 'globe_dark.jpg';\n\nexport default class Globe extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmarkers: [],\n\t\t\tloaded: false\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\t// Get map data\n\t\t\tconst jsonResponse = await getDailyReport(false);\n\t\t\tconst dataJson = await readString(jsonResponse, { header: true });\n\t\t\tif (dataJson && dataJson.data) {\n\t\t\t\tthis.setState({ markers: formatGlobeMarkers(dataJson.data) });\n\t\t\t\t//console.log(this.state.markers);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { markers } = this.state;\n\t\treturn (\n\t\t\t<div style={{ width: '100vw', height: '50vh' }}>\n\t\t\t\t<ReactGlobe\n\t\t\t\t\tmarkers={markers}\n\t\t\t\t\tmarkerOptions={{ getTooltipContent }}\n\t\t\t\t\tglobeOptions={{\n\t\t\t\t\t\ttexture: `https://raw.githubusercontent.com/chrisrzhou/react-globe/master/textures/${globe}`\n\t\t\t\t\t}}\n\t\t\t\t\tonTextureLoaded={() => this.setLoaded(true)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tsetLoaded = (loaded) => {\n\t\tthis.setState({ loaded });\n\t};\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Box from '@material-ui/core/Box';\nimport Bars from './components/bars/bars';\nimport Dashboard from './components/dashboard/dashboard';\nimport MapsComponent from './components/map/map';\nimport TimeSeries from './components/timeSeries/timeSeries';\nimport Globe from './components/globe/globe';\nimport './App.scss';\n\nfunction TabPanel(props) {\n\tconst { children, value, index, ...other } = props;\n\n\treturn (\n\t\t<Typography\n\t\t\tcomponent='div'\n\t\t\trole='tabpanel'\n\t\t\thidden={value !== index}\n\t\t\tid={`full-width-tabpanel-${index}`}\n\t\t\taria-labelledby={`full-width-tab-${index}`}\n\t\t\t{...other}>\n\t\t\t{value === index && <Box p={3}>{children}</Box>}\n\t\t</Typography>\n\t);\n}\n\nTabPanel.propTypes = {\n\tchildren: PropTypes.node,\n\tindex: PropTypes.any.isRequired,\n\tvalue: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n\treturn {\n\t\tid: `full-width-tab-${index}`,\n\t\t'aria-controls': `full-width-tabpanel-${index}`\n\t};\n}\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tbackgroundColor: '#e0e0e0',\n\t\tpadding: '0'\n\t}\n}));\n\nexport default function App() {\n\tconst classes = useStyles();\n\tconst [ value, setValue ] = React.useState(0);\n\n\tconst handleChange = (event, newValue) => {\n\t\tsetValue(newValue);\n\t};\n\n\tconst imageUrl = require('./assets/images/rsz_covid.png');\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar position='static' color='primary'>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<img className='image-container' src={imageUrl} alt='Covid Icon' />\n\t\t\t\t\t<Typography variant='h6' className={classes.title}>\n\t\t\t\t\t\tViru Saastrabuddhe - COVID-19 Data Visualizer\n\t\t\t\t\t</Typography>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<AppBar position='static' color='default'>\n\t\t\t\t<Tabs centered value={value} onChange={handleChange} indicatorColor='primary' textColor='primary'>\n\t\t\t\t\t<Tab label='Dashboard' {...a11yProps(0)} />\n\t\t\t\t\t<Tab label='Heat Map' {...a11yProps(1)} />\n\t\t\t\t\t<Tab label='Top 15' {...a11yProps(2)} />\n\t\t\t\t\t<Tab label='Time Series' {...a11yProps(3)} />\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t\t<TabPanel className='padd' value={value} index={0}>\n\t\t\t\t<Dashboard />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={value} index={1}>\n\t\t\t\t<MapsComponent />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel className='padd' value={value} index={2}>\n\t\t\t\t<Bars />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel className='padd' value={value} index={3}>\n\t\t\t\t<TimeSeries />\n\t\t\t</TabPanel>\n\t\t\t<hr />\n\t\t\t<div className='disclaimer'>\n\t\t\t\t<p>\n\t\t\t\t\tViru Saastrabuddhe (A COVID-19 Data Visualizer) is built using the data from{' '}\n\t\t\t\t\t<a target='blank' href='https://github.com/CSSEGISandData'>\n\t\t\t\t\t\tJohn Hopkins CSSE GitHub Repo\n\t\t\t\t\t</a>. It displays interactive visuals and map to provide best available information on the current\n\t\t\t\t\tglobal issue of COVID-19.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tAs stated in the mentioned repo's Terms of Use, the data is provided to the public strictly for\n\t\t\t\t\teducational and academic research purposes. The data comes from multiple publicly available sources,\n\t\t\t\t\tthat do not always agree.\n\t\t\t\t</p>\n\t\t\t\t<p>This App is strictly for the purpose of information and education and not for commercial use.</p>\n\t\t\t\t<p>\n\t\t\t\t\t<a target='blank' href='https://phil.cdc.gov/Details.aspx?pid=23312'>\n\t\t\t\t\t\tCoronavirus Image Source{' '}\n\t\t\t\t\t</a>- CDC/ Alissa Eckert, MS; Dan Higgins, MAM\n\t\t\t\t</p>\n\t\t\t\t<p>Copyright (c) 2020 Sagar Patel</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}